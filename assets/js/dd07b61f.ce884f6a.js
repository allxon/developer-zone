"use strict";(self.webpackChunkocto_develop_zone=self.webpackChunkocto_develop_zone||[]).push([[417],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,f=u["".concat(l,".").concat(m)]||u[m]||g[m]||o;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},637:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const o={},i=void 0,s={unversionedId:"Implement Features/Configs",id:"Implement Features/Configs",title:"Configs",description:"config-sequence",source:"@site/docs/Implement Features/Configs.md",sourceDirName:"Implement Features",slug:"/Implement Features/Configs",permalink:"/Implement Features/Configs",draft:!1,editUrl:"https://github.com/allxon/developer-zone/edit/master/docs/Implement Features/Configs.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Events",permalink:"/Implement Features/Events"}},l={},p=[],c={toc:p};function g(e){let{components:n,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"config-sequence",src:t(7537).Z,width:"680",height:"383"})),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"Configs")," feature sequence flow is similar to that of the ",(0,a.kt)("strong",{parentName:"p"},"Alerts")," feature. You need to send ",(0,a.kt)("inlineCode",{parentName:"p"},"v2/notifyPluginUpdate")," to initialize the ",(0,a.kt)("strong",{parentName:"p"},"Configs")," card on Allxon Portal. Then you can proceed to complete the settings. Once done, the plugin receives ",(0,a.kt)("inlineCode",{parentName:"p"},"v2/notifyPluginConfigUpdate")," for the settings."),(0,a.kt)("p",null,"Here is an example of creating the ",(0,a.kt)("strong",{parentName:"p"},"Configs")," card:"),(0,a.kt)("p",null,"First, send ",(0,a.kt)("inlineCode",{parentName:"p"},"v2/notifyPluginUpdate"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:"{17-31}","{17-31}":!0},'{\n  "jsonrpc": "2.0",\n  "method": "v2/notifyPluginUpdate",\n  "params": {\n    "sdk": "${OCTO_SDK_VERSION}",\n    "appGUID": "${PLUGIN_APP_GUID}",\n    "appName": "${PLUGIN_NAME}",\n    "epoch": "",\n    "displayName": "plugIN Hello",\n    "type": "ib",\n    "version": "${PLUGIN_VERSION}",\n    "modules": [\n      {\n        "moduleName": "${PLUGIN_NAME}",\n        "displayName": "plugIN Hello",\n        "properties": [],\n        "configs": [\n          {\n            "name": "config1",\n            "displayName": "config1 display name",\n            "description": "config1 description",\n            "displayCategory": "ConfigCategory1",\n            "params": [\n              {\n                "name": "config1Param1",\n                "required": true,\n                "displayType": "string"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n')),(0,a.kt)("p",null,"Then you can see the ",(0,a.kt)("strong",{parentName:"p"},"Configs")," card, as shown below."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"config-init",src:t(5914).Z,width:"592",height:"319"})),(0,a.kt)("p",null,"Now let\u2019s try updating the settings of the ",(0,a.kt)("strong",{parentName:"p"},"Configs")," card. Use the following procedure to fill in the parameters. "),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Click ",(0,a.kt)("strong",{parentName:"li"},"Edit")," on the upper right corner of the card."),(0,a.kt)("li",{parentName:"ol"},"Enter ",(0,a.kt)("em",{parentName:"li"},'"my display"')," as the parameter and click ",(0,a.kt)("strong",{parentName:"li"},"Save"))),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"config-set-param",src:t(7941).Z,width:"593",height:"321"})),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"A confirmation dialog pops up. Click ",(0,a.kt)("strong",{parentName:"li"},"Save")," to confirm the change.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"config-set-finished",src:t(2421).Z,width:"418",height:"188"})),(0,a.kt)("p",null,"Once done, the plugin gets notified of the configs setting update by receiving the following new ",(0,a.kt)("inlineCode",{parentName:"p"},"v2/notifyPluginConfigUpdate"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jsonrpc": "2.0",\n    "method": "v2/notifyPluginConfigUpdate?authorization=$argon2id$v=19$m=64,t=16,p=8$KksxWlhPbjRULHA0Yj5WYA$abdF1Vo4573+Uz5I0Xz81A",\n    "params": {\n        "appGUID": "a8e873a1-e5df-43a2-928a-745ff9c94dfb",\n        "version": "1.0.1",\n        "epoch": "1664866949",\n        "modules": [\n            {\n                "moduleName": "plugin-hello",\n                "epoch": "1664866940",\n                "configs": [\n                    {\n                        "name": "config1",\n                        "params": [\n                            {\n                                "name": "config1Param1",\n                                "value": "my display"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n}\n')),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"The settings of Alerts and Configs belong to the group-level. When the user changes the Alerts/Configs settings on the Portal, the Portal deploys the changes to all the plugins in the same device group. Then Allxon Portal displays the Alerts/Configs card based on the latest plugin version in the device group and stores the latest settings. When the plugin receives the Alerts/Configs settings, it must check whether the settings are supported by the current plugin version. If not supported, the plugin must ignore the message. ")))}g.isMDXComponent=!0},5914:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/config-init-893bceaa863c17153404d995dad44a40.png"},7537:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/config-sequence-f0159bcc8acce133e0f980aa5ca20adc.png"},2421:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/config-set-finished-03ca8c249b1c3e5600c840b083aa3f27.png"},7941:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/config-set-param-7195873379cfe2c222d7c90f771faeb6.png"}}]);