"use strict";(self.webpackChunkocto_develop_zone=self.webpackChunkocto_develop_zone||[]).push([[3622],{3823:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>a});var o=t(4848),i=t(8453);const s={},l="Architecture",r={id:"Main Concept/Architecture",title:"Architecture",description:"Allxon Octo SDK establishes an extensible architecture on edge devices with Allxon Agent and device plugins. The SDK includes a set of unified and integrated interfaces, which accelerates plugin development, enhances security, and facilitates and simplifies the communication between device applications and the cloud.",source:"@site/versioned_docs/version-1.1.0/Main Concept/Architecture.md",sourceDirName:"Main Concept",slug:"/Main Concept/Architecture",permalink:"/1.1.0/Main Concept/Architecture",draft:!1,unlisted:!1,editUrl:"https://github.com/allxon/developer-zone/edit/master/versioned_docs/version-1.1.0/Main Concept/Architecture.md",tags:[],version:"1.1.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Try out Hello Plugin",permalink:"/1.1.0/Getting Started/Try out Hello Plugin"},next:{title:"Features",permalink:"/1.1.0/Main Concept/Features"}},c={},a=[{value:"Securing Your Data\u200b",id:"securing-your-data",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"architecture",children:"Architecture"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Allxon Octo SDK"})," establishes an extensible architecture on edge devices with Allxon Agent and device plugins. The SDK includes a set of unified and integrated interfaces, which accelerates plugin development, enhances security, and facilitates and simplifies the communication between device applications and the cloud."]}),"\n",(0,o.jsx)(n.p,{children:"This picture below is an overview of the Allxon Octo architecture. The plugin communicates with Allxon Agent through JSON-RPC Websocket, and the Allxon Agent connects to MQTT server hosted by Allxon Cloud. With such a design, Allxon Octo API seamlessly transmits JSON between the cloud and the plugin."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"allxon_infrasturcture",src:t(1699).A+"",width:"2576",height:"1721"})}),"\n",(0,o.jsx)(n.p,{children:"Not quite clear? Refer to the descriptions below to learn more about each element."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Allxon Cloud"}),": The backend server(s) of Allxon service; both Allxon Portal and Allxon Agent are connected to Allxon Cloud.\n",(0,o.jsx)(n.strong,{children:"Allxon Portal"}),": The frontend server(s) of Allxon service.\n",(0,o.jsx)(n.strong,{children:"Allxon Agent"}),": An agent application that communicates between edge devices and Allxon Cloud.\n",(0,o.jsx)(n.strong,{children:"Plugin"}),": A software application that extends the functionalities of Allxon service. A plugin sends collected data from modules to Allxon Cloud via the Allxon Agent. It also sends commands from Allxon Portal to modules via the Allxon Agent.\n",(0,o.jsx)(n.strong,{children:"Module"}),": A hardware component (e.g. GPU, SSD, fan) or a software application (e.g. remote console utilities). A plugin collects data from a module or sends commands to a module.\n",(0,o.jsx)(n.strong,{children:"MQTT Broker"}),": Allxon Agent connects to a MQTT broker hosted by Allxon Cloud. All the data exchange between Allxon Agents and Allxon Cloud go through this channel.\n",(0,o.jsx)(n.strong,{children:"WebSocket Server"}),": A plugin connects to a WebSocket server hosted within an Allxon Agent. The plugin sends and receives data to/from Allxon Cloud with Allxon Octo APIs through this channel.\n",(0,o.jsx)(n.strong,{children:"Allxon Octo API"}),": The Application Programming Interface used to communicate between Allxon Agent and plugins.\n",(0,o.jsx)(n.strong,{children:"Allxon Octo SDK"}),": The Software Development Kit provided by Allxon, which helps developers to build plugins and verify Allxon Octo APIs."]}),"\n",(0,o.jsx)(n.h2,{id:"securing-your-data",children:"Securing Your Data\u200b"}),"\n",(0,o.jsxs)(n.p,{children:["Allxon Octo SDK uses ",(0,o.jsx)(n.em,{children:"Plugin Credential"})," to verify the JSON sent from Allxon Agent and to sign the JSON to be sent to Allxon Agent."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"security",src:t(3056).A+""})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:'#include <string>\n#include "json_validator.h"\n\nint main(int argc, char **argv)\n{\n    // notifyPluginUpdate json template\n    std::string json_content = "{\\"jsonrpc\\": \\"2.0\\", \\"method\\": \\"v2/notifyPluginUpdate\\"...}";\n    std::string PLUGIN_NAME = "my_plugin_name";\n    std::string PLUGIN_APP_GUID = "my_plugin_app_guid";\n    std::string PLUGIN_ACCESS_KEY = "my_plugin_access_key";\n    std::string PLUGIN_VERSION = "my_plugin_version";\n\n    auto json_validator = JsonValidator(PLUGIN_NAME, PLUGIN_APP_GUID,\n                                        PLUGIN_ACCESS_KEY, PLUGIN_VERSION,\n                                        json_content);\n\n    std::string other_plugin_api_json_content;\n    if (json_validator.Sign(other_plugin_api_json_content))\n    {\n        // if sign-in is successful, you can send it through websocket\n        // e.g.\n        // enpoint.send(other_plugin_api_json_content);\n    }\n\n    if (json_validator.Verify(other_plugin_api_json_content))\n    {\n        // if verification is successful, it means json content is safe, you can read it\n    }\n    return 0;\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},3056:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/Security.drawio-70123cf2e48a67349d5f06c78cf5889b.svg"},1699:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/allxon_infrastructure-b451deb987784b8efd50945b34002224.png"},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var o=t(6540);const i={},s=o.createContext(i);function l(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);